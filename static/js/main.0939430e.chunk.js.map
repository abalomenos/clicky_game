{"version":3,"sources":["components/NavBar/NavBar.js","components/Header/Header.js","components/AvatarCards/AvatarCards.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","className","href","this","props","GameMessageClass","GameMessage","GameScore","GameTopScore","Component","Header","style","backgroundImage","concat","AvatarCard","handleAvatarOnClick","event","_this","AvatarOnClick","shuffleAvatar","avatarList","i","length","randomIndex","Math","floor","random","currentAvatar","_this2","Avatars","map","avatar","role","aria-label","AvatarClass","url","backgroundRepeat","backgroundPosition","key","id","onClick","Footer","src","alt","target","rel","App","state","score","topScore","selectedAvatars","message","messageClass","avatarClass","componentDidMount","gameInitialize","setState","gameRound","ID","getAttribute","Score","TopScore","SelectedAvatars","includes","setTimeout","push","AvatarList","components_NavBar_NavBar","components_Header_Header","AvatarCards_AvatarCards","components_Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0939430e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './NavBar.css';\n\n\nclass NavBar extends Component {\n    render() {\n        return (\n            <nav className='navbar'>\n                <ul>\n                    <li className='brand'>\n                        <a href='/'>Clicky Game</a>\n                    </li>\n                    <li className={this.props.GameMessageClass}>{this.props.GameMessage}</li>\n                    <li>Score: {this.props.GameScore} | Top Score: {this.props.GameTopScore}</li>\n                </ul>\n            </nav>\n        );\n    }\n}\n\nexport default NavBar;\n","import React, { Component } from 'react';\nimport './Header.css';\n\nconst img ='./assets/images/headerBG.jpg'\n\nclass Header extends Component {\n    render() {\n        return (\n            <header className='header' style={{ backgroundImage: `url(${img})` }}>\n                <div className='headerContainer'>\n                    <h1>Clicky Game!</h1>\n                    <h2>Click on all images to win, but don't click the same image more than once!</h2>\n                </div>\n            </header>\n        );\n    }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport './AvatarCards.css';\n\n\nclass AvatarCard extends Component {\n\n    handleAvatarOnClick = (event) => {\n        this.props.AvatarOnClick(event);\n    };\n \n    shuffleAvatar = (avatarList) => {\n        \n        // Loop through the AvatarList and shuffle their position\n        for (let i = avatarList.length -1; i >= 0; i--) {\n            let randomIndex =  Math.floor(Math.random() * (i + 1));\n            let currentAvatar = avatarList[i];\n            avatarList[i] = avatarList[randomIndex];\n            avatarList[randomIndex] = currentAvatar;\n        }\n        \n        return avatarList;\n        \n    };\n    \n    render() {\n        return (\n            <main className='container'>\n                {this.shuffleAvatar(this.props.Avatars).map(avatar => (\n                    <div \n                        role='img'\n                        aria-label='click item'\n                        className={this.props.AvatarClass}\n                        style={{\n                            backgroundImage: `url(${avatar.url})`,\n                            backgroundRepeat  : 'no-repeat',\n                            backgroundPosition: 'center'\n                        }}\n                        key={avatar.id}\n                        id={avatar.id}\n                        onClick={this.handleAvatarOnClick}\n                    >\n                    </div>\n                ))}\n            </main>\n        );\n    }\n}\n\nexport default AvatarCard;\n","import React, { Component } from 'react';\nimport './Footer.css';\n\n\nconst img = './assets/images/reactlogo.svg';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <footer className='footer'>\n                <div className='bottom'>\n                    Powered By<img src={img} className='App-logo' alt='logo'/><a href='https://github.com/abalomenos' target='_blank' rel='noopener noreferrer'>Argiris Balomenos</a>\n                </div>\n            </footer>\n        );\n    }\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport NavBar from './components/NavBar';\nimport Header from './components/Header';\nimport AvatarCards from './components/AvatarCards';\nimport AvatarList from './components/AvatarCards/AvatarList.json';\nimport Footer from './components/Footer';\n\n\nclass App extends Component {\n\n    // Set Initial States\n    state = {\n        score: 0,\n        topScore: 0,\n        selectedAvatars: [],\n        message: \"Click an image to begin!\",\n        messageClass: \"\",\n        avatarClass: \"click-item\"\n    }\n\n    // When DOM is ready\n    componentDidMount = () => {\n        this.gameInitialize();\n    }\n\n    // Function to Initialize the Game\n    gameInitialize = () => {\n        this.setState({\n            score: 0,\n            selectedAvatars: []\n        });\n    }\n\n    // Function called after each Avatar is Clicked\n    gameRound = (event) => {\n        \n        let ID = event.target.getAttribute('id');\n        let Score = this.state.score;\n        let TopScore = this.state.topScore;\n        let SelectedAvatars = this.state.selectedAvatars;\n\n        // Check if we lost the game\n        if (SelectedAvatars.includes(ID)) {\n            \n            // Update the DOM\n            this.setState({\n                messageClass: \"\" // In order to get CSS effect\n            }, () => {\n                setTimeout(() => this.setState({ \n                    score: 0,\n                    message: \"You lost!\",\n                    messageClass: \"incorrect\",\n                    avatarClass: \"click-item shake\"\n                }), 0);\n            })\n\n            this.gameInitialize();\n\n        } else {\n\n            // Increase our score by 1\n            Score ++;\n            // Push our selected image ID to our array\n            SelectedAvatars.push(ID);\n            \n            // Check if we won the game\n            if (Score === AvatarList.length) {\n                \n                // Update the DOM\n                this.setState({\n                    messageClass: \"\" // In order to get CSS effect\n                }, () => {\n                    setTimeout(() => this.setState({\n                        score: 0,\n                        topScore: Score,\n                        message: \"You won!\",\n                        messageClass: \"correct\",\n                        avatarClass: \"click-item\"\n                    }), 0);\n                });\n                \n                this.gameInitialize();\n\n            } else { // Update our game progress\n\n                // Update the DOM\n                this.setState({\n                    messageClass: \"\" // In order to get CSS effect\n                }, () => {\n                    setTimeout(() => this.setState({\n                        score: Score,\n                        topScore: (Score >= TopScore) ? Score : TopScore,\n                        message: (AvatarList.length - Score === 1) ? `Almost there, ${AvatarList.length - Score} image left!` : `${AvatarList.length - Score} images left!`,\n                        messageClass: \"correct\",\n                        avatarClass: \"click-item\"\n                    }), 0);\n                });\n\n            }\n\n        }\n\n    }\n\n    // Render the DOM\n    render() {\n        return (\n            <div>\n                <NavBar \n                    GameScore={this.state.score}\n                    GameTopScore={this.state.topScore}\n                    GameMessage={this.state.message}\n                    GameMessageClass={this.state.messageClass}\n                />\n                <Header />\n                <AvatarCards \n                    Avatars={AvatarList}\n                    AvatarOnClick={this.gameRound}\n                    AvatarClass={this.state.avatarClass}\n                />\n                <Footer />\n            </div>\n        );\n    } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}